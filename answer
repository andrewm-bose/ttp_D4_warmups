-- See the attached image for the question.

--For this one, there is no dataset we're working with here, so you have to look at the structure of the two tables (attached image), 
--and come up with the query "by hand" (write/type it out).
--HINTS:
--For this question, be sure to write the query to include users who made no comments in January 2019.
--Assume the the formate for the dates is "YYYY-MM-DD"
--Assume for this histogram, the "bin size" for comments is 1, ie users will be counted together only if they made 
--the exact same number of comments in January 2019 (as opposed to a range of counts). Soooo... if there were three 
--users with comment counts respectively of 8, 11, 8, the output should give a count of 2 for the value of 8 comments 
--and 1 for a value of 11 comments.
--For inspiration and checking your syntax, you could try a similar query on databased you have installed 
--(eg. dvd_rental, northwind), and then translate that to this problem.


-- STEP 1
SELECT users.id, COUNT(user_comments.user_id) AS comment_count
FROM users
LEFT JOIN user_comments
    ON users.id = user_comments.user_id
WHERE created_at BETWEEN '2019-01-01' AND '2019-01-31'
GROUP BY user.id
--The above CTE gives us a table with each user id and their corresponding comment count for the month of January 2019. 
--Now that we have the comment count for each user, all we need to do is to group by the comment count to get a histogram.

-- STEP 2
WITH user_comment_counts_jan2019 AS (
    SELECT users.id, COUNT(user_comments.user_id) AS comment_count
    FROM users
    LEFT JOIN user_comments
        ON users.id = user_comments.user_id
    WHERE created_at BETWEEN '2019-01-01' AND '2019-01-31'
    GROUP BY user.id
)

SELECT comment_count, 
	COUNT(DISTINCT comment_count) AS frequency
FROM user_comment_counts_jan2019
GROUP BY comment_count